using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TraceCorrelationManager
{
    class Program
    {
        /// <summary>
        /// http://msdn.microsoft.com/en-us/library/system.diagnostics.correlationmanager%28v=vs.110%29.aspx
        /// 
        /// Logical operation identities are objects, allowing the use of a type for a logical operation identity.
        /// 
        /// Traces generated from a single logical operation can be tagged with an operation-unique identity, in order to distinguish them 
        /// from traces from a different logical operation. For example, it may be useful to group correlated traces by ASP.NET request. 
        /// The CorrelationManager class provides methods used to store a logical operation identity in a thread-bound context and automatically 
        /// tag each trace event generated by the thread with the stored identity.
        /// 
        /// </summary>
        /// <param name="args"></param>
        static void Main(string[] args)
        {
            // Usinc CorrelationManager with TraceTransfer 
            ChangingActivityTest();

            // Run SImpleCorrelationManager correlation manager
            SimpleCorrelationManager();
        }

        static void SimpleCorrelationManager()
        {
            Guid activityGuid = Guid.NewGuid();

            CorrelationManager cm = Trace.CorrelationManager;
            cm.StartLogicalOperation("MainThread");

            cm.ActivityId = activityGuid;

            cm.LogicalOperationStack.Push("Some sheet");
            cm.LogicalOperationStack.Push("Some sheet2");

            cm.StopLogicalOperation();
        }

        /// <summary>
        /// Tracing for WCF services
        /// http://msdn.microsoft.com/en-us/library/aa738759(v=vs.110).aspx
        /// </summary>
        static void ChangingActivityTest()
        {
            // TraceTransfer is intended to be used with the logical operations of a CorrelationManager. 
            // The relatedActivityId parameter relates to the ActivityId property of a CorrelationManager object. 
            // If a logical operation begins in one activity and transfers to another, the second activity logs the transfer by calling the TraceTransfer method. 
            // The TraceTransfer call relates the new activity identity to the previous identity. The most likely consumer of this functionality is a trace viewer 
            // that can report logical operations that span multiple activities.
            TraceSource ts = new TraceSource("ActivityTrace", SourceLevels.ActivityTracing);
            
            SourceSwitch tsw = new SourceSwitch("MySourceSwitch");
            tsw.Level = SourceLevels.All; // Override SourceLevels.ActivityTracing from TraceSource
            ts.Switch = tsw;

            using (TraceListener tl = new DelimitedListTraceListener("Log.csv", "MyListener"))
            {
                tl.TraceOutputOptions |= TraceOptions.LogicalOperationStack | TraceOptions.DateTime;
                ts.Listeners.Add(tl);
                tl.WriteLine("Ok, lets do this! #1");
                ts.TraceEvent(TraceEventType.Information, 1, "Ok, lets do this! #2");
                ts.TraceInformation("Ok, lets do this! #3");

                // Creating Activities
                // Activities are logical unit of processing. You can create one activity for each major processing unit in which you want traces to be grouped together. For example, you can create one activity for each request to the service. To do so, perform the following steps.
                if (Trace.CorrelationManager.ActivityId == Guid.Empty)
                {
                    Guid newGuid = Guid.NewGuid();
                    Trace.CorrelationManager.ActivityId = newGuid;
                }
                Guid oldActivityID = Trace.CorrelationManager.ActivityId;
                Guid newActivityID = Guid.NewGuid();

                // Transfer from the activity in scope to the new one, set the new activity in scope and emit a start trace for that activity.
                ts.TraceTransfer(0, "ChangingActivityTest", newActivityID);
                Trace.CorrelationManager.ActivityId = newActivityID; // Trace is static
                ts.TraceEvent(TraceEventType.Start, 0, "Started transfer");

                // Emitting Traces from whithin new activity
                ts.TraceInformation("Trace between transfers #1");
                ts.TraceInformation("Trace between transfers #2");
                ts.TraceInformation("Trace between transfers #3");
                ts.TraceInformation("Trace between transfers #4");
                ts.TraceInformation("Trace between transfers #5");

                // Stopping the activity
                // To stop the activities, transfer back to the old activity, stop the current activity id, and reset the old activity id in scope.
                ts.TraceTransfer(0, "ChangingActivityTest", oldActivityID);
                ts.TraceEvent(TraceEventType.Stop, 0, "Completed transfer");
                Trace.CorrelationManager.ActivityId = oldActivityID;
            }

            ts.Flush();
            ts.Close();
        }
    }
}
